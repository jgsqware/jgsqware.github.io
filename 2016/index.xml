<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016s on JG sQware</title>
    <link>http://jgsqware.github.io/2016/</link>
    <description>Recent content in 2016s on JG sQware</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Feb 2016 11:00:00 +0100</lastBuildDate>
    <atom:link href="http://jgsqware.github.io/2016/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Registry - Docker Hub, at Home, for Free!</title>
      <link>http://jgsqware.github.io/2016/02/docker-registry-installation/</link>
      <pubDate>Wed, 10 Feb 2016 11:00:00 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2016/02/docker-registry-installation/</guid>
      <description>

&lt;h3 id=&#34;or-how-to-have-our-docker-authenticated-registry-on-premise:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;&lt;em&gt;Or how to have our docker authenticated registry On-Premise&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s first take a look on &lt;a href=&#34;https://docs.docker.com/registry/&#34;&gt;Docker Registry&lt;/a&gt; page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should use the Registry if you want to:
  - tightly control where your images are being stored
  - fully own your images distribution pipeline
  - integrate image storage and distribution tightly into your in-house development workflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now, how can we deploy our registry, how can I connect to it and manage my images.&lt;/p&gt;

&lt;h2 id=&#34;registry-authentication-what-s-behind:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Registry, Authentication: what&amp;rsquo;s behind&lt;/h2&gt;

&lt;p&gt;Again, I will take the info from &lt;a href=&#34;https://docs.docker.com/registry/spec/auth/token/&#34;&gt;Docker Registry Token Authentication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1EHZU9uBLmcH0kytDClBv6jv6WR4xZjE8RKEUw1mARJA/pub?w=480&amp;amp;h=360&#34; alt=&#34;Docker Registry Token Authentication&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Basically, we will deploy a Token Based Authentication server &lt;em&gt;&amp;ldquo;Authorization service&amp;rdquo;&lt;/em&gt; then configure the registry to connect to it for authentication.
I will use the &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose v2&lt;/a&gt; for running multiple containers.&lt;/p&gt;

&lt;p&gt;The final version is on the github: &lt;a href=&#34;http://www.github.com/jgsqware/authenticated-registry&#34;&gt;jgsqware/authenticated-registry&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;token-based-authentication-server-and-registry-configuration:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Token Based Authentication server and Registry configuration&lt;/h2&gt;

&lt;h3 id=&#34;token-based-authentication-server:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Token Based Authentication server&lt;/h3&gt;

&lt;p&gt;I will use &lt;a href=&#34;https://hub.docker.com/r/cesanta/docker_auth/&#34;&gt;cesanta/docker_auth/&lt;/a&gt;, a go implementation of authentication server.&lt;/p&gt;

&lt;p&gt;Supported authentication methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static list of users&lt;/li&gt;
&lt;li&gt;Google Sign-In (incl. Google for Work / GApps for domain) (documented here)&lt;/li&gt;
&lt;li&gt;LDAP bind&lt;/li&gt;
&lt;li&gt;MongoDB user collection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is based on Static list of User&lt;/p&gt;

&lt;p&gt;First, I create the following directory structure&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;authenticated-registry/
├ docker-compose.yml
├── config
│   └── auth_config.yml # contain your static list of users
└── ssl
    ├── server.key # For this purpose ,
    └── server.pem # we will use self-signed certificate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The certificate is a self signed certificate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd authenticated-registry/ssl
$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout server.key -out server.pem
# I use auth as Common Name
# auth is the URI of my authentication server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the &lt;code&gt;authenticated-registry/docker-compose.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;

services:
  auth:
    image: cesanta/docker_auth
    ports:
      - &amp;quot;5001:5001&amp;quot;
    volumes:
      - ./config:/config:ro
      - ./ssl:/ssl
    command: /config/auth_config.yml
    container_name: &amp;quot;auth&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the &lt;code&gt;authenticated-registry/config/auth_config.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;server:  # Server settings.
  # Address to listen on.
  addr: &amp;quot;:5001&amp;quot;
  # TLS certificate and key.
  certificate: &amp;quot;/ssl/server.pem&amp;quot;
  key: &amp;quot;/ssl/server.key&amp;quot;

token:  # Settings for the tokens.
  issuer: &amp;quot;auth_service&amp;quot;  # Must match issuer in the Registry config.
  expiration: 900


# Static user map.
users:
  # Password is specified as a BCrypt hash. Use htpasswd -B to generate.
  &amp;quot;admin&amp;quot;:
    password: &amp;quot;$2y$05$C3oDhd2O3nvcacmvGxojN.MPPvcV7LApYQU3meFMU5GeC27kb.0sK&amp;quot;
  &amp;quot;jgsqware&amp;quot;: # my user
    password: &amp;quot;$2y$05$oGKwJ8QJDLBOoTBmC/EQiefIMV1N9Yt9jpX3SqMoRqZRRql6q7yam&amp;quot;

acl:
  # Admin has full access to everything.
  - match: {account: &amp;quot;admin&amp;quot;}
    actions: [&amp;quot;*&amp;quot;]
  # Users have full right on their repository
  - match: {account: &amp;quot;/.+/&amp;quot;, name: &amp;quot;${account}/*&amp;quot;}
    actions: [&amp;quot;*&amp;quot;]
  # Access is denied by default.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information about the configuration options for this authentication server, refer to the &lt;a href=&#34;https://github.com/cesanta/docker_auth&#34;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To generate the password with htpasswd with BCrypt hash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ htpasswd -nbB jgsqware jgsqware
jgsqware:$2y$05$oGKwJ8QJDLBOoTBmC/EQiefIMV1N9Yt9jpX3SqMoRqZRRql6q7yam
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;registry:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Registry&lt;/h3&gt;

&lt;p&gt;Docker offers his registry as a docker image. Nice guy!&lt;/p&gt;

&lt;p&gt;I based this setup on &lt;em&gt;registry 2.1.1&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Update: Docker released the registry &lt;strong&gt;2.3&lt;/strong&gt;. It change some Manifest info and how the image is stored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The configuration of the registry is done by &lt;strong&gt;environment variable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;authenticated-registry/docker-compose.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;

services:
  auth:
    image: cesanta/docker_auth
    ports:
      - &amp;quot;5001:5001&amp;quot;
    volumes:
      - ./config:/config:ro
      - ./ssl:/ssl
    command: /config/auth_config.yml
    container_name: &amp;quot;auth&amp;quot;

  registry:
    image: registry:2.2.1
    ports:
      - 5000:5000
    volumes:
      - ./ssl:/ssl
    container_name: &amp;quot;registry&amp;quot;
    environment:
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
      - REGISTRY_AUTH=token
      - REGISTRY_AUTH_TOKEN_REALM=https://auth:5001/auth # the authentication server URI
      - REGISTRY_AUTH_TOKEN_SERVICE=&amp;quot;registry&amp;quot;
      - REGISTRY_AUTH_TOKEN_ISSUER=&amp;quot;auth_service&amp;quot; # Should be the same as token.issuer from authenticated-registry/config/auth_config.yml
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/ssl/server.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;registry-data-persistence:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Registry data persistence&lt;/h3&gt;

&lt;p&gt;I will use a &lt;a href=&#34;http://docs.docker.com/engine/userguide/dockervolumes/&#34;&gt;Docker Volume&lt;/a&gt; to persist registry data.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;authenticated-registry/docker-compose.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;

services:
  auth:
    image: cesanta/docker_auth
    ports:
      - &amp;quot;5001:5001&amp;quot;
    volumes:
      - ./config:/config:ro
      - ./ssl:/ssl
    command: /config/auth_config.yml
    container_name: &amp;quot;auth&amp;quot;

  registry:
    image: registry:2.2.1
    ports:
      - 5000:5000
    volumes:
      - ./ssl:/ssl
      - registry-data:/var/lib/registry
    container_name: &amp;quot;registry&amp;quot;
    environment:
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
      - REGISTRY_AUTH=token
      - REGISTRY_AUTH_TOKEN_REALM=https://auth:5001/auth # the authentication server URI
      - REGISTRY_AUTH_TOKEN_SERVICE=&amp;quot;registry&amp;quot;
      - REGISTRY_AUTH_TOKEN_ISSUER=&amp;quot;auth_service&amp;quot; # Should be the same as token.issuer from authenticated-registry/config/auth_config.yml
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/ssl/server.pem

volumes:
  registry-data: # the real name will be &amp;lt;parent-folder-name&amp;gt;_registry-data (dash &#39;-&#39; int he folder name will be removed). eg. authenticatedregistry_registry-data
    driver: local
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;let-s-run-it:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Let&amp;rsquo;s Run it!&lt;/h2&gt;

&lt;p&gt;To start the authenticated registry, simply run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run docker-compose up -d to start all container
# -d is for running container as daemon

$ docker-compose up -d
Creating network &amp;quot;authenticatedregistry_default&amp;quot; with the default driver
Creating registry
Creating auth

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The running container can be seen by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES
6f706e4684fb        cesanta/docker_auth   &amp;quot;/auth_server /config&amp;quot;   47 minutes ago      Up 47 minutes       0.0.0.0:5001-&amp;gt;5001/tcp   auth
073e1d94e452        registry:2.2.1        &amp;quot;/bin/registry /etc/d&amp;quot;   47 minutes ago      Up 47 minutes       0.0.0.0:5000-&amp;gt;5000/tcp   registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The created data volume cn be seen by:&lt;/p&gt;

&lt;p&gt;&amp;rdquo;&amp;lsquo;bash
$ docker volume ls
DRIVER              VOLUME NAME
local               authenticatedregistry_registry-data
&amp;ldquo;&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Your own docker registry is now available:
- you can &lt;strong&gt;login&lt;/strong&gt;,&lt;strong&gt;pull&lt;/strong&gt;, &lt;strong&gt;push&lt;/strong&gt; repository on localhost:5000&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker login localhost:5000
Username: jgsqware
Password:
Email: jgsqware@wemanity.com
Login Succeeded
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker tag jgsqware/ubuntu-git localhost:5000/jgsqware/ubuntu-git
$ docker push localhost:5000/jgsqware/ubuntu-git
The push refers to a repository [localhost:5000/jgsqware/ubuntu-git]
3ae0de97330a: Pushing [==========================&amp;gt;                        ]   163 MB/304.5 MB
5f70bf18a086: Pushed
dfd83ed44976: Pushed
217e6c75dcfc: Pushed
c0b5f9221fac: Pushing [==============================================&amp;gt;    ] 173.4 MB/187.7 MB

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;backup-restore:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Backup &amp;amp; Restore&lt;/h2&gt;

&lt;h3 id=&#34;backup-registry-data:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Backup registry data&lt;/h3&gt;

&lt;p&gt;As we have create a &lt;a href=&#34;http://docs.docker.com/engine/userguide/dockervolumes/&#34;&gt;Docker Volume&lt;/a&gt;, we can backup the folder where the registry save its data to a tar file easily.&lt;/p&gt;

&lt;p&gt;We will
  1. run a new container and mount the &lt;em&gt;registry-data&lt;/em&gt; volume
  2. mount the &lt;strong&gt;local folder&lt;/strong&gt; to &lt;code&gt;/backup&lt;/code&gt; in the container.
  3. we will compress the registry data to a tarball.
  4. copy the tarball to the &lt;code&gt;/backup&lt;/code&gt; folder to got it on our &lt;strong&gt;local folder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use the jgsqware/registry-backup image. This image to the tarball and move it to backup&lt;/p&gt;

&lt;p&gt;the Dockerfile is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine
MAINTAINER jgsqware &amp;lt;jgonzalez@wemanity.com&amp;gt;
WORKDIR /var/lib/registry

ENTRYPOINT [&amp;quot;tar&amp;quot;,&amp;quot;cvf&amp;quot;, &amp;quot;/backup/registry-data.tar&amp;quot;,&amp;quot;.&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -v authenticatedregistry_registry-data:/var/lib/registry -v $(pwd):/backup jgsqware/registry-backup
./
./docker/
./docker/registry/
./docker/registry/v2/
./docker/registry/v2/repositories/
./docker/registry/v2/repositories/jgsqware/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have now a file &lt;code&gt;registry-data.tar&lt;/code&gt; in your local folder.&lt;/p&gt;

&lt;h3 id=&#34;restore-registry-data:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Restore registry data&lt;/h3&gt;

&lt;p&gt;You can now restore the previously backuped registry data to a new registry data container.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the docker-compose, you will have a registry data volume but it will be empty.&lt;/li&gt;
&lt;li&gt;Uncompress the &lt;code&gt;registry-data.tar&lt;/code&gt; in the corresponding directory in the registry data.

&lt;ol&gt;
&lt;li&gt;Run a new container and mount the &lt;em&gt;registry-data&lt;/em&gt; volume&lt;/li&gt;
&lt;li&gt;Mount the &lt;strong&gt;local folder&lt;/strong&gt; to &lt;code&gt;/backup&lt;/code&gt; in the container.&lt;/li&gt;
&lt;li&gt;Uncompress the tarball to &lt;code&gt;/var/lib/registry&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I use the jgsqware/registry-backup image. This image to the tarball and move it to backup&lt;/p&gt;

&lt;p&gt;the Dockerfile is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine
MAINTAINER jgsqware &amp;lt;jgonzalez@wemanity.com&amp;gt;
WORKDIR /var/lib/registry

ENTRYPOINT [&amp;quot;tar&amp;quot;,&amp;quot;xvf&amp;quot;, &amp;quot;/backup/registry-data.tar&amp;quot;,&amp;quot;.&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# The file need to be named &#39;registry-data.tar&#39;
$ docker run -v authenticatedregistry_registry-data:/var/lib/registry -v $(pwd):/backup jgsqware/registry-restore
./
./docker/
./docker/registry/
./docker/registry/v2/
./docker/registry/v2/repositories/
./docker/registry/v2/repositories/jgsqware/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/_manifests/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/_manifests/tags/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/_manifests/tags/latest/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/_manifests/tags/latest/index/
./docker/registry/v2/repositories/jgsqware/ubuntu-git/_manifests/tags/latest/index/sha256/
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-docker-toolbox-for-osx-or-windows:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Using the Docker Toolbox for OSX or Windows&lt;/h2&gt;

&lt;p&gt;Because Docker need to run on a real Linux Kernel (containerization tools exist only on Linux (for now)), you can install Docker on Windows and OSX with Docker Toolbox.&lt;/p&gt;

&lt;p&gt;Docker Toolbox will install the client tools (docker-client, docker-compose, docker-machine) and virtualbox with boot2docker image.&lt;/p&gt;

&lt;p&gt;boot2docker is a tiny linux os, on which docker is runnable.
Docker Toolbox will configure your docker client to connect to connect to the docker-machine (here is boot2docker).&lt;/p&gt;

&lt;h3 id=&#34;docker-insecure-registry:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Docker Insecure Registry&lt;/h3&gt;

&lt;p&gt;To be able to use the registry in boot2docker, and because the registry is not secure by certificate (&lt;em&gt;it will be in another story&lt;/em&gt;),
we need to tell docker to allow communication with this insecure registry.&lt;/p&gt;

&lt;p&gt;It can be done by adding &lt;code&gt;--insecure-registry=&amp;lt;IP-OF-REGISTRY&amp;gt;:&amp;lt;PORT-OF-REGISTRY&amp;gt;&lt;/code&gt; in the boot2docker profile.&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SSH your docker-machine
# docker-machine ssh &amp;lt;DOCKER-MACHINE-NAME&amp;gt;
$ docker-machine ssh default

# Open in vi the boot2docker profile.
# profile is the configuration file used by docker when it start in boot2docker
$ sudo vi /var/lib/boot2docker/profile

# Add line &#39;--insecure-registry &amp;lt;docker-machine-ip&amp;gt;:5000&#39; in **EXTRA_ARGS**
EXTRA_ARGS=&#39;
--label provider=virtualbox
--insecure-registry 192.168.99.100:5000
&#39;
# quit vi with :wq to save file

# Restart docker
$ sudo /etc/init.d/docker restart
# Quit docker machine by CTRL-D
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;open-registry-port-on-boot2docker:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Open Registry port on boot2docker&lt;/h3&gt;

&lt;p&gt;You need to open the vm port5000 to put your registry on the network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use VBoxManage controlvm &amp;lt;VM-NAME&amp;gt; natpf1 &amp;lt;RULE-NAME&amp;gt;,tcp,&amp;lt;INTERFACE IP&amp;gt;,&amp;lt;VM-PORT-TO-OPEN&amp;gt;,,&amp;lt;DOCKER-PORT-TO-MAP&amp;gt;
# Here, we are creating a rule registry in vm registry, mapping the docker port 5000 to the vm port 5000 on every interface

$ VBoxManage controlvm registry natpf1 registry,tcp,0.0.0.0,5000,,5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you access over the network with:
- repository: on &lt;IP-OF-OSX/WINDOWS-HOST&gt;:5000&lt;/p&gt;

&lt;h4 id=&#34;errors-what:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Errors&amp;hellip; What?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you try to access your insecure registry without define it as insecure-registry, you will received the following error when you will try to &lt;em&gt;push/pull&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ docker pull 192.168.99.100:5000/jgsqware/ubuntu-git
       unable to ping registry endpoint https://192.168.99.101:5000/v0/
         v2 ping attempt failed with error: Get https://192.168.99.101:5000/v2/: tls: oversized record received with length 20527
           v1 ping attempt failed with error: Get https://192.168.99.101:5000/v1/_ping: tls: oversized record received with length 20527
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes, docker run out of his mind when restarting
You can see it in log, with last line as&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  # In your docker machine. Remember, SSH things.
  $ tail -f /var/log/docker.log
  level=fatal msg=&amp;quot;Shutting down due to ServeAPI error: listen tcp 0.0.0.0:2376: bind: address already in use&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see that, just kill docker and start it again&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ sudo killall docker
  $ sudo /etc/init.d/docker start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, it should be ok&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ tail -f /var/log/docker.log
  level=info msg=&amp;quot;Daemon has completed initialization&amp;quot;
  level=info msg=&amp;quot;Docker daemon&amp;quot; commit=f4bf5c7 execdriver=native-0.2 graphdriver=aufs version=1.8.3
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;this-post-is-inspired-by-this-article-creating-private-docker-registry-2-0-with-token-authentication-service-https-the-binbashtheory-com-creating-private-docker-registry-2-0-with-token-authentication-service:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;This post is inspired by this article: &lt;a href=&#34;https://the.binbashtheory.com/creating-private-docker-registry-2-0-with-token-authentication-service/&#34;&gt;Creating Private Docker Registry 2.0 with Token Authentication Service&lt;/a&gt;&lt;/h6&gt;
</description>
    </item>
    
    <item>
      <title>Docker Pro Tips</title>
      <link>http://jgsqware.github.io/2016/01/docker-pro-tips/</link>
      <pubDate>Thu, 14 Jan 2016 08:00:00 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2016/01/docker-pro-tips/</guid>
      <description>

&lt;h2 id=&#34;docker-daemon:13dab5c50f2a26b253bb0212bca3627c&#34;&gt;Docker Daemon&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update Docker Daemon options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a. Debian
Docker daemon is run via &lt;code&gt;systemd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;/etc/default/docker&lt;/code&gt; in systemd configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# In file /lib/systemd/system/docker.service
[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network.target docker.socket
Requires=docker.socket

[Service]
EnvironmentFile=-/etc/default/docker
Type=notify
ExecStart=/usr/bin/docker daemon -H fd://
MountFlags=slave
LimitNOFILE=1048576
LimitNPROC=1048576
LimitCORE=infinity

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jgsqware.github.io/2016/draft/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jgsqware.github.io/2016/draft/security/</guid>
      <description>

&lt;h1 id=&#34;install-gogs:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Install Gogs&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create volume
&lt;code&gt;docker volume create --name gogs-data&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pull image
&lt;code&gt;docker pull gogs/gogs&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run with volume
&lt;code&gt;docker run --name=gogs -p 10022:22 -p 10080:3000 -v gogs-data:/data -d gogs/gogs&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;settings:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Settings&lt;/h2&gt;

&lt;p&gt;Most of settings are obvious and easy to understand, but there are some settings can be confusing by running Gogs inside Docker:&lt;/p&gt;

&lt;h3 id=&#34;database-settings:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Database Settings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Database type&lt;/strong&gt;: SQLite3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt;: data/gogs.db&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;general-settings:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;General Settings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repository Root Path&lt;/strong&gt;: keep it as default value &lt;code&gt;/home/git/gogs-repositories&lt;/code&gt; because &lt;code&gt;start.sh&lt;/code&gt; already made a symbolic link for you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run User&lt;/strong&gt;: keep it as default value &lt;code&gt;git&lt;/code&gt; because &lt;code&gt;start.sh&lt;/code&gt; already setup a user with name &lt;code&gt;git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain&lt;/strong&gt;: fill in with Docker container IP(e.g. &lt;code&gt;192.168.99.100&lt;/code&gt;). But if you want to access your Gogs instance from a different physical machine, please fill in with the hostname or IP address of the Docker host machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH Port&lt;/strong&gt;: Use the exposed port from Docker container. For example, your SSH server listens on &lt;code&gt;22&lt;/code&gt; inside Docker, but you expose it by &lt;code&gt;10022:22&lt;/code&gt;, then use &lt;code&gt;10022&lt;/code&gt; for this value. &lt;strong&gt;Builtin SSH server is not recommended inside Docker Container&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP Port&lt;/strong&gt;: Use port you want Gogs to listen on inside Docker container. For example, your Gogs listens on &lt;code&gt;3000&lt;/code&gt; inside Docker, and you expose it by &lt;code&gt;10080:3000&lt;/code&gt;, but you still use &lt;code&gt;3000&lt;/code&gt; for this value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application URL&lt;/strong&gt;: Use combination of &lt;strong&gt;Domain&lt;/strong&gt; and &lt;strong&gt;exposed HTTP Port&lt;/strong&gt; values(e.g. &lt;code&gt;http://192.168.99.100:10080/&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;vulnerable-container:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Vulnerable container&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM busybox:latest
MAINTAINER Julien Garcia Gonzalez &amp;lt;jgonzalez@wemanity.com&amp;gt;

ENTRYPOINT echo &amp;quot;Hello from Vulnerable Container!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;coreos-clair:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;CoreOS Clair&lt;/h1&gt;

&lt;h2 id=&#34;installing-gopath:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Installing GOPATH&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Cannot use ~ metashell character
mkdir /home/juliengarcia/.go

# In .zshrc
export GOPATH=&amp;quot;~/.go&amp;quot;
export PATH=$PATH:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-clair:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Install Clair&lt;/h2&gt;

&lt;h3 id=&#34;install-go-tool-to-analyze-image-locally:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Install Go Tool to analyze image locally&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/coreos/clair/contrib/analyze-local-images
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;copy-base-configuration-file-locally:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Copy base configuration file locally&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# In your Clair folder
curl -O https://raw.githubusercontent.com/coreos/clair/master/config.example.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-clair-container:8c8be46b296d6b9c1a91080fe9b4316b&#34;&gt;Run Clair container&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v /tmp:/tmp -p 6060:6060 -p 6061:6061 -v &amp;lt;DIR_WITH_CONFIG&amp;gt;:/config:ro quay.io/coreos/clair:latest --config=/config/config.example.yaml
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>