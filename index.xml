<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rocket Vision</title>
    <link>http://juliengarcia.github.io/</link>
    <description>Recent content on Rocket Vision</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2015 14:04:36 +0100</lastBuildDate>
    <atom:link href="http://juliengarcia.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker hosts automatic update</title>
      <link>http://juliengarcia.github.io/docker-hosts-automatic-update/</link>
      <pubDate>Tue, 10 Nov 2015 14:04:36 +0100</pubDate>
      
      <guid>http://juliengarcia.github.io/docker-hosts-automatic-update/</guid>
      <description></description>
    </item>
    
    <item>
      <title>docker tips and tricks</title>
      <link>http://juliengarcia.github.io/docker-tips-and-tricks/</link>
      <pubDate>Tue, 10 Nov 2015 14:04:24 +0100</pubDate>
      
      <guid>http://juliengarcia.github.io/docker-tips-and-tricks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Install Docker on OSX</title>
      <link>http://juliengarcia.github.io/docker-install-osx/</link>
      <pubDate>Tue, 10 Nov 2015 12:15:58 +0100</pubDate>
      
      <guid>http://juliengarcia.github.io/docker-install-osx/</guid>
      <description>

&lt;h1 id=&#34;let-s-put-some-docker-in-your-osx:c37c4d4abc178f0a4b5ad7b30aa416ee&#34;&gt;Let&amp;rsquo;s put some Docker in your OSX&lt;/h1&gt;

&lt;p&gt;The easier way to install Docker is with the &lt;a href=&#34;https://www.docker.com/docker-toolbox&#34;&gt;Docker Toolbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docker toolbox install:
 - Docker Client
 - Docker Machine
 - Docker Compose
 - Docker Kitematic
 - VirtualBox&lt;/p&gt;

&lt;p&gt;You can install Docker Toolbox via &lt;a href=&#34;Link to homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; brew install docker-toolbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can run a Docker terminal with the VM boot2docker started and environment variable configured by running &lt;strong&gt;Docker Quickstart Terminal&lt;/strong&gt; app.&lt;/p&gt;

&lt;p&gt;Or you can run it by yourself with &lt;strong&gt;Docker Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List Docker Machine available

&amp;gt; docker-machine ls
NAME            ACTIVE   DRIVER       STATE     URL                         SWARM
default                  virtualbox   Running   tcp://192.168.99.101:2376

# To start a docker machine akka VM
# &amp;gt; docker-machine start &amp;lt;DOCKER-MACHINE-NAME&amp;gt;
&amp;gt; docker-machine start default

# To create a new docker machine
# docker-machine create --driver=&amp;lt;VM-DRIVER&amp;gt; &amp;lt;NAME-OF-VM&amp;gt;
# --driver=virtualbox is use in OSX to run with boot2docker
&amp;gt; docker-machine create --driver=virtualbox registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To allow your docker-client to speak with your docker daemon inside your docker machine &lt;em&gt;you follow me, right?&lt;/em&gt;, you need to configure some &lt;strong&gt;environment variables&lt;/strong&gt; like &lt;code&gt;DOCKER_HOST=&amp;lt;IP-OF-VM&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;docker-machine help you on that with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; eval $(docker-machine env virtual-slave)

# If you want to run connect to your vm with a specific shell you can use --shell=&amp;lt;SHELL-NAME&amp;gt;

&amp;gt; eval $(docker-machine env virtual-slave --shell=zsh)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Registry - Docker Hub, at Home, for Free!</title>
      <link>http://juliengarcia.github.io/docker-registry-installation/</link>
      <pubDate>Mon, 09 Nov 2015 15:35:40 +0100</pubDate>
      
      <guid>http://juliengarcia.github.io/docker-registry-installation/</guid>
      <description>

&lt;h1 id=&#34;registry-docker-hub-at-home-for-free:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Registry - Docker Hub, at Home, for Free!&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Or how to have our docker registry hub locally
Due to the slow network, we need to find a way to download docker images from local network instead of Docker Hub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is related to OSX docker-machine version. It&amp;rsquo;s almost the same on linux box.&lt;/p&gt;

&lt;h2 id=&#34;let-s-run-that-s-folk-s:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Let&amp;rsquo;s Run that&amp;rsquo;s folk&amp;rsquo;s!&lt;/h2&gt;

&lt;p&gt;Docker offers his registry as a docker image. Nice guy!&lt;/p&gt;

&lt;p&gt;To start a registry, latest version, simply run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run -p 5000:5000 --name registry registry:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will run, but will &lt;strong&gt;not persist&lt;/strong&gt; data when the container will stopped.
So we will use &lt;a href=&#34;Docker-Compose link&#34;&gt;docker-compose&lt;/a&gt;, Docker-compose help you to manage run of multiple container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# data volume container
# The container is used to store data, backup and restore
# TODO: Change to alpine images, to get a smaller one
storage:
  image: busybox
  volumes:
    - /var/lib/registry
  command: &amp;quot;true&amp;quot;

# Caching Container
# Should be use to cache registry and enhance velocity of registry
# TODO: reactivate it

# cache:
#   image: redis

# Registry container
# This container handle the registry itself.
# Is running and expose 5000 port
# It use sqlalchemy as search engine. It&#39;s needed by frontend

backend:
  image: registry:2
  ports:
    - 5000:5000
  links:
    # - cache
    - storage
  volumes_from:
    - storage
  environment:
    SETTINGS_FLAVOR: local
    STORAGE_PATH: /var/lib/registry
    SEARCH_BACKEND: sqlalchemy
    # CACHE_REDIS_HOST: cache
    # CACHE_REDIS_PORT: 6379
    # CACHE_LRU_REDIS_HOST: cache
    # CACHE_LRU_REDIS_PORT: 6379

# Frontend container
# Deploy a Frontend for registry.
# You can browse, delete,... your repository
# Update ENV_DOCKER_REGISTRY_HOST with the ip of your docker-machine: docker-machine ip &amp;lt;MACHINE_NAME&amp;gt;
# TODO: map URL to backend

frontend:
  image: konradkleine/docker-registry-frontend:v2
  ports:
    - 5080:80
  environment:
    ENV_DOCKER_REGISTRY_HOST: 192.168.99.100
    ENV_DOCKER_REGISTRY_PORT: 5000

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Caching through Redis is in place but not enabled actually
I need to add the restart-always in docker-compose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now run your docker-compose file to start your container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run docker-compose up -d to start all container
# -d is for running container as daemon

&amp;gt; docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your own docker registry is now available:
- you can &lt;strong&gt;pull*, **push&lt;/strong&gt;, &lt;strong&gt;search&lt;/strong&gt; repository on &lt;IP-OF-DOCKER&gt;:5000
- you can browse the repository on &lt;IP-OF-DOCKER&gt;:5080&lt;/p&gt;

&lt;!-- TODO insert UI screenshot--&gt;

&lt;h2 id=&#34;everywhere-you-want-it-everywhere:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Everywhere&amp;hellip; You want it everywhere&lt;/h2&gt;

&lt;p&gt;You need to open the vm port 5080 and 5000 to put your registry on the network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use VBoxManage controlvm &amp;lt;VM-NAME&amp;gt; natpf1 &amp;lt;RULE-NAME&amp;gt;,tcp,&amp;lt;INTERFACE IP&amp;gt;,&amp;lt;VM-PORT-TO-OPEN&amp;gt;,,&amp;lt;DOCKER-PORT-TO-MAP&amp;gt;
# Here, we are creating a rule registry in vm registry, mapping the docker port 5000 to the vm port 5000 on every interface

&amp;gt; VBoxManage controlvm registry natpf1 registry,tcp,0.0.0.0,5000,,5000
&amp;gt; VBoxManage controlvm registry natpf1 registry,tcp,0.0.0.0,5080,,5080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you access over the network with:
- repository: on &lt;IP-OF-HOST&gt;:5000
- UI: on &lt;IP-OF-HOST&gt;:5080&lt;/p&gt;

&lt;h2 id=&#34;and-now-action:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;And now&amp;hellip; Action!&lt;/h2&gt;

&lt;h3 id=&#34;allow-connection-to-insecure-registry:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Allow connection to insecure registry&lt;/h3&gt;

&lt;p&gt;As the registry is not secure by certificate actually (&lt;em&gt;it will be in another story&lt;/em&gt;),
we need to tell docker to allow communication with this insecure registry.&lt;/p&gt;

&lt;p&gt;It can be done by adding &lt;code&gt;--insecure-registry=&amp;lt;IP-OF-REGISTRY&amp;gt;:&amp;lt;PORT-OF-REGISTRY&amp;gt;&lt;/code&gt; in the boot2docker profile.&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SSH your docker-machine
# docker-machine ssh &amp;lt;DOCKER-MACHINE-NAME&amp;gt;
&amp;gt; docker-machine ssh registry

# Add docker-registry as resolved name in /etc/hosts
# It will be more user-friendly
&amp;gt; sudo vi /etc/hosts
&amp;lt;IP OF Registry&amp;gt; docker-registry
# quit vi with :wq to save file

# Open in vi the boot2docker profile.
# profile is the configuration file used by docker when it start in boot2docker
&amp;gt; sudo vi /var/lib/boot2docker/profile

# Add line &#39;--insecure-registry docker-registry:5000&#39; in **EXTRA_ARGS**
EXTRA_ARGS=&#39;
--label provider=virtualbox
--insecure-registry docker-registry:5000
&#39;
# quit vi with :wq to save file

# Restart docker
&amp;gt; sudo /etc/init.d/docker restart
# Quit docker machine by CTRL-D

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;errors-what:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Errors&amp;hellip; What?&lt;/h4&gt;

&lt;p&gt;If you try to access your insecure registry without define it as insecure-registry, you will received the following error when you will try to &lt;em&gt;push/pull&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker pull 192.168.99.101:5000/registry
     unable to ping registry endpoint https://192.168.99.101:5000/v0/
       v2 ping attempt failed with error: Get https://192.168.99.101:5000/v2/: tls: oversized record received with length 20527
         v1 ping attempt failed with error: Get https://192.168.99.101:5000/v1/_ping: tls: oversized record received with length 20527
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes, docker run out of his mind when restarting
You can see it in log, with last line as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# In your docker machine. Remember, SSH things.
&amp;gt; tail -f /var/log/docker.log
level=fatal msg=&amp;quot;Shutting down due to ServeAPI error: listen tcp 0.0.0.0:2376: bind: address already in use&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see that, just kill docker and start it again&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; sudo killall -9 docker
&amp;gt; sudo /etc/init.d/docker start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;New, it should be ok&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; tail -f /var/log/docker.log
level=info msg=&amp;quot;Daemon has completed initialization&amp;quot;
level=info msg=&amp;quot;Docker daemon&amp;quot; commit=f4bf5c7 execdriver=native-0.2 graphdriver=aufs version=1.8.3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;push-image:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Push image&lt;/h3&gt;

&lt;p&gt;Now, to &lt;strong&gt;push&lt;/strong&gt; images to your own docker registry, you have to tag your image with the docker registry url in it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker tag &amp;lt;IMAGE-NAME:?tag&amp;gt; &amp;lt;REGISTRY-IP&amp;gt;:&amp;lt;PORT&amp;gt;/&amp;lt;IMAGE-NAME:?tag&amp;gt;
&amp;gt; docker tag registry docker-registry:5000/registry

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can push it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker push &amp;lt;TAG-WITH-REPO-URL&amp;gt;
&amp;gt; docker push docker-registry:5000/registry
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pull-image:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Pull image&lt;/h3&gt;

&lt;p&gt;To &lt;strong&gt;pull&lt;/strong&gt; images from your own docker registry, you have to pull with the docker registry url in it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker pull &amp;lt;REGISTRY-IP&amp;gt;:&amp;lt;PORT&amp;gt;/&amp;lt;IMAGE-NAME:?tag&amp;gt;
&amp;gt; docker pull docker-registry:5000/registry
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;backup-restore:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Backup &amp;amp; Restore&lt;/h2&gt;

&lt;h3 id=&#34;backup-registry-data:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Backup registry data&lt;/h3&gt;

&lt;p&gt;As we have create a &lt;a href=&#34;http://docs.docker.com/engine/userguide/dockervolumes/&#34;&gt;Data Volume Container&lt;/a&gt;, we can backup the folder where the registry save its data to a tar file easily.&lt;/p&gt;

&lt;p&gt;We will run a new container and mount volumes from registry data container, then mount the local folder to &lt;code&gt;/backup&lt;/code&gt; in the container. Then, we will compress the registry data to a tarball.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run --volumes-from registry_storage_1 -v $(pwd):/backup ubuntu sh -c &amp;quot;cd /var/lib/registry &amp;amp;&amp;amp; tar cvf /backup/registry-data.tar .&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have now a file &lt;code&gt;registry-data.tar&lt;/code&gt; in your local folder.&lt;/p&gt;

&lt;h3 id=&#34;restore-registry-data:c34b9d8e1a9d73777d6418bc254d4972&#34;&gt;Restore registry data&lt;/h3&gt;

&lt;p&gt;You can now restore the previously backuped registry data to a new registry data container.&lt;/p&gt;

&lt;p&gt;So after running the docker-compose, you will have a registry data container but it will be empty. Then, you will have to uncompress the &lt;code&gt;registry-data.tar&lt;/code&gt; in the corresponding directory in the registry data container.&lt;/p&gt;

&lt;p&gt;We will run a new container and mount volumes from registry data container, and mount the local folder to &lt;code&gt;/backup&lt;/code&gt;in the container. Then, we will decompress the registry data to the registry data folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run --volumes-from registry_storage_1 -v $(pwd):/backup ubuntu sh -c &amp;quot;cd /var/lib/registry &amp;amp;&amp;amp; tar xvf /backup/registry-data.tar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;New, you will can check your repository UI url, your backuped images are restored.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>