<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2015s on JG sQware</title>
    <link>http://jgsqware.github.io/2015/</link>
    <description>Recent content in 2015s on JG sQware</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Dec 2015 11:00:00 +0100</lastBuildDate>
    <atom:link href="http://jgsqware.github.io/2015/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wecraft and Devops</title>
      <link>http://jgsqware.github.io/2015/12/draft/wecraft-and-devops/</link>
      <pubDate>Mon, 14 Dec 2015 11:00:00 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2015/12/draft/wecraft-and-devops/</guid>
      <description>

&lt;h1 id=&#34;context:9a0bb0b71228ba678f2933d76d26e796&#34;&gt;Context&lt;/h1&gt;

&lt;p&gt;Nginx - Jenkins - Slave&lt;/p&gt;

&lt;h1 id=&#34;networking:9a0bb0b71228ba678f2933d76d26e796&#34;&gt;Networking&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create Key-Value store for Service Discover, Networks, IPs, &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; docker-machine create -d virtualbox keystore
   &amp;gt; docker $(docker-machine config keystore) run -d \
    -p &amp;quot;8500:8500&amp;quot; \
    -h &amp;quot;consul&amp;quot; \
    progrium/consul -server -bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create a swarm master&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; docker-machine create \
        -d virtualbox \
        --swarm --swarm-master \
        --swarm-discovery=&amp;quot;consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
        --engine-opt=&amp;quot;cluster-store=consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
        --engine-opt=&amp;quot;cluster-advertise=eth1:2376&amp;quot; \
        swarm-m
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create Swarm nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; docker-machine create -d virtualbox \
    --swarm \
    --swarm-discovery=&amp;quot;consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
    --engine-opt=&amp;quot;cluster-store=consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
    --engine-opt=&amp;quot;cluster-advertise=eth1:2376&amp;quot; \
    swarm-0
   
   &amp;gt; docker-machine create -d virtualbox \
    --swarm \
    --swarm-discovery=&amp;quot;consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
    --engine-opt=&amp;quot;cluster-store=consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
    --engine-opt=&amp;quot;cluster-advertise=eth1:2376&amp;quot; \
    swarm-1
   
   &amp;gt; docker-machine create -d virtualbox \
    --swarm \
    --swarm-discovery=&amp;quot;consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
    --engine-opt=&amp;quot;cluster-store=consul://&amp;lt;keystore-ip&amp;gt;:8500&amp;quot; \
    --engine-opt=&amp;quot;cluster-advertise=eth1:2376&amp;quot; \
    swarm-2
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create network&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; eval $(docker-machine env --swarm swarm-m)
   &amp;gt; docker network create -d overlay my-awesome-network
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Show network on nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; eval $(docker-machine env swarm-0)
   &amp;gt; docker network ls
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Back on swarm master&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; eval $(docker-machine env --swarm swarm-m)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create Redis Database on node 0&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; docker run -d --name=db --net=my-awesome-network --env=&amp;quot;constraint:node==swarm-0&amp;quot; -p 6379:6379 redis
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create Node Application on node 1&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; docker run -d --name=app --net=my-awesome-network --env=&amp;quot;constraint:node==swarm-1&amp;quot; -p 8080:8080 jgsqware/node-sample:wecraft-15-12-14
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create Nginx Web Server on node 2&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   &amp;gt; docker run -d --name=web --net=my-awesome-network --env=&amp;quot;constraint:node==swarm-2&amp;quot; -p 80:80 jgsqware/nginx-sample:wecraft-15-12-14
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>rancher jenkins gitlab</title>
      <link>http://jgsqware.github.io/2015/11/draft/rancher-jenkins-gitlab/</link>
      <pubDate>Tue, 24 Nov 2015 15:11:16 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2015/11/draft/rancher-jenkins-gitlab/</guid>
      <description>

&lt;h1 id=&#34;create-machine-rancheros:2b111e2d93820ea9d8d426ecc3e5fd6b&#34;&gt;Create Machine RancherOS&lt;/h1&gt;

&lt;p&gt;docker-machine create -d virtualbox &amp;ndash;virtualbox-boot2docker-url &lt;a href=&#34;https://github.com/rancher/os/releases/download/v0.4.1/rancheros.iso&#34;&gt;https://github.com/rancher/os/releases/download/v0.4.1/rancheros.iso&lt;/a&gt; &amp;ndash;engine-insecure-registry=192.168.99.113:5000  node-02&lt;/p&gt;

&lt;h1 id=&#34;run-agent:2b111e2d93820ea9d8d426ecc3e5fd6b&#34;&gt;Run Agent&lt;/h1&gt;

&lt;p&gt;docker run -d &amp;ndash;privileged -v /var/run/docker.sock:/var/run/docker.sock rancher/agent &lt;a href=&#34;http://192.168.99.109:8080/v1/scripts/1BEF035774A57A80B8D7:1448373600000:k8MZKOxFjSKhbGo6rJYq8h8Wsw&#34;&gt;http://192.168.99.109:8080/v1/scripts/1BEF035774A57A80B8D7:1448373600000:k8MZKOxFjSKhbGo6rJYq8h8Wsw&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;download-locally-the-agent:2b111e2d93820ea9d8d426ecc3e5fd6b&#34;&gt;Download locally the agent&lt;/h1&gt;

&lt;p&gt;docker pull 192.168.99.120:5000/rancher/agent:v0.8.2 &amp;amp;&amp;amp;\
  docker tag 192.168.99.120:5000/rancher/agent:v0.8.2 rancher/agent:v0.8.2 &amp;amp;&amp;amp;\
  docker pull 192.168.99.120:5000/rancher/agent-instance:v0.5.0 &amp;amp;&amp;amp;\
  docker tag 192.168.99.120:5000/rancher/agent-instance:v0.5.0 rancher/agent-instance:v0.5.0&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SonarQube with PostgreSQL on Docker</title>
      <link>http://jgsqware.github.io/2015/11/draft/sonarqube-with-postgresql-on-docker/</link>
      <pubDate>Fri, 20 Nov 2015 11:52:33 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2015/11/draft/sonarqube-with-postgresql-on-docker/</guid>
      <description>

&lt;h1 id=&#34;run-sonarqube-on-postgresql:109f71eb4cb170550111d782491e538d&#34;&gt;Run SonarQube on PostgreSQL&lt;/h1&gt;

&lt;p&gt;Use this &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sonarqube:
  image: sonarqube
  ports:
   - &amp;quot;9000:9000&amp;quot;
   - &amp;quot;5432:5432&amp;quot;
  links:
    - db:db
  environment:
   - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar

db:
  image: postgres
  environment:
   - POSTGRES_USER=sonar
   - POSTGRES_PASSWORD=sonar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then your SonarQube instance is available on &lt;code&gt;&amp;lt;DOCKER-MACHINE-IP&amp;gt;:9000&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;analyse-your-project:109f71eb4cb170550111d782491e538d&#34;&gt;Analyse your project&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mvn sonar:sonar \
  -Dsonar.host.url=http://&amp;lt;DOCKER-MACHINE-IP&amp;gt;:9000 \
  -Dsonar.jdbc.url=jdbc:postgresql://&amp;lt;DOCKER-MACHINE-IP&amp;gt;/sonar
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;backup-sonar-data:109f71eb4cb170550111d782491e538d&#34;&gt;Backup Sonar data&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run --rm --link sonar_db_1:db -v $(pwd):/data -e PGPASSWORD=&amp;quot;sonar&amp;quot; postgres-backup -h db -U sonar -f /data/sonar_db_backup.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;restore-sonar-data:109f71eb4cb170550111d782491e538d&#34;&gt;Restore Sonar data&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run --rm --link sonar_db_1:db -v $(pwd):/data -e PGPASSWORD=&amp;quot;sonar&amp;quot; postgres-restore -h db -U sonar -f /data/sonar_db_backup.sql
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker: Update your hosts with docker-machine ips automatically</title>
      <link>http://jgsqware.github.io/2015/11/docker-hosts-automatic-update/</link>
      <pubDate>Tue, 10 Nov 2015 09:00:00 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2015/11/docker-hosts-automatic-update/</guid>
      <description>&lt;p&gt;I develop a small script to update your &lt;code&gt;/etc/hosts&lt;/code&gt; with your docker machine ip and a related resolved name.&lt;/p&gt;

&lt;p&gt;You can found the gist here  &lt;a href=&#34;https://gist.github.com/juliengarcia/9a208ca5cf6590b25150&#34;&gt;update-hosts-docker-machine.sh&lt;/a&gt; or here is it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash
#Usage docker-machine-update-hosts.sh hosts.conf
#arg1 is a configuration file with hosts

#Remove existing lines from hosts
while read -r line; do
    [[ &amp;quot;$line&amp;quot; =~ ^#.*$ ]] &amp;amp;&amp;amp; continue
  echo &amp;quot;Configuration: $line&amp;quot;
  IFS=&#39;=&#39; read -a configuration &amp;lt;&amp;lt;&amp;lt; &amp;quot;$line&amp;quot;
  machine=${configuration[0]}

  IFS=&#39;,&#39; read -a hosts &amp;lt;&amp;lt;&amp;lt; &amp;quot;${configuration[1]}&amp;quot;

  DOCKER_IP=$(docker-machine ip $machine)
  for host in &amp;quot;${hosts[@]}&amp;quot;; do
    echo &amp;quot;Adding $DOCKER_IP  $host&amp;quot;
    sudo bash -c &amp;quot;sed -i &#39;&#39; &#39;/^192\.168\.99\.[[:digit:]]\{0,3\}[[:space:]]*$host/d&#39; /etc/hosts&amp;quot;
    sudo bash -c &amp;quot;echo &#39;$DOCKER_IP  $host&#39; &amp;gt;&amp;gt; /etc/hosts&amp;quot;
  done

done &amp;lt; &amp;quot;$1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have to use it with a configuration file, &lt;code&gt;hosts.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Pattern
# &amp;lt;docker-machine name&amp;gt;=&amp;lt;host name&amp;gt;,&amp;lt;host name&amp;gt;,...
registry=docker-registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, run it with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; update-hosts-docker-machine.sh hosts.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On OSX, you need to flush the dns cache&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; dscacheutil -flushcache
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker: Installation on OSX</title>
      <link>http://jgsqware.github.io/2015/11/docker-install-osx/</link>
      <pubDate>Tue, 10 Nov 2015 08:00:00 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2015/11/docker-install-osx/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s put some Docker in your OSX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The easier way to install Docker is with the &lt;a href=&#34;https://www.docker.com/docker-toolbox&#34;&gt;Docker Toolbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docker toolbox install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker Client&lt;/li&gt;
&lt;li&gt;Docker Machine&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;li&gt;Docker Kitematic&lt;/li&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install Docker Toolbox via &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; brew install docker-toolbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can run a Docker terminal with the VM boot2docker started and environment variable configured by running &lt;strong&gt;Docker Quickstart Terminal&lt;/strong&gt; app.&lt;/p&gt;

&lt;p&gt;Or you can run it by yourself with &lt;strong&gt;Docker Machine&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List Docker Machine available

&amp;gt; docker-machine ls
NAME            ACTIVE   DRIVER       STATE     URL                         SWARM
default                  virtualbox   Running   tcp://192.168.99.101:2376

# To start a docker machine akka VM
# &amp;gt; docker-machine start &amp;lt;DOCKER-MACHINE-NAME&amp;gt;
&amp;gt; docker-machine start default

# To create a new docker machine
# docker-machine create --driver=&amp;lt;VM-DRIVER&amp;gt; &amp;lt;NAME-OF-VM&amp;gt;
# --driver=virtualbox is use in OSX to run with boot2docker
&amp;gt; docker-machine create --driver=virtualbox registry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To allow your docker-client to speak with your docker daemon inside your docker machine&amp;hellip;  &lt;em&gt;Huf&amp;hellip; you follow me, right?&lt;/em&gt;.
So, you need to configure some &lt;strong&gt;environment variables&lt;/strong&gt; like &lt;code&gt;DOCKER_HOST=&amp;lt;IP-OF-VM&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;docker-machine help you on that with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; eval $(docker-machine env virtual-slave)

# If you want to run connect to your vm with a specific shell you can use (like the awesome oh-my-zsh) --shell=&amp;lt;SHELL-NAME&amp;gt;

&amp;gt; eval $(docker-machine env virtual-slave --shell=zsh)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Deploy Hugo on Github user pages</title>
      <link>http://jgsqware.github.io/2015/11/deploy-hugo-on-github-user-pages/</link>
      <pubDate>Mon, 09 Nov 2015 08:00:00 +0100</pubDate>
      
      <guid>http://jgsqware.github.io/2015/11/deploy-hugo-on-github-user-pages/</guid>
      <description>

&lt;p&gt;This blog is deployed on &lt;a href=&#34;https://help.github.com/articles/user-organization-and-project-pages/#user--organization-pages&#34;&gt;GitHub User Pages&lt;/a&gt; with &lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, I&amp;rsquo;ve follow the &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;Hugo User Guide to deploy with Wercker&lt;/a&gt;. But it deploy on Github project pages and not Github User pages. You can use the Hugo user guide first than replace your &lt;code&gt;wercker.yml&lt;/code&gt; file with the following one.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m planning to use Hugo as my personal blog generator. So, i&amp;rsquo;ve created a repository in Github &lt;a href=&#34;https://github.com/juliengarcia/rocket-vision&#34;&gt;Rocket-Vision&lt;/a&gt; that hold my &lt;strong&gt;not build&lt;/strong&gt; blog.&lt;/p&gt;

&lt;p&gt;Then I use Wercker to build and deploy on the &lt;a href=&#34;https://github.com/juliengarcia/juliengarcia.github.io&#34;&gt;Github User Page repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configure-wercker-file:a63ae4cd6112f070c57749a3089cca2d&#34;&gt;Configure Wercker file&lt;/h2&gt;

&lt;p&gt;To build and deploy on Wercker, you need a &lt;code&gt;wercker.yml&lt;/code&gt; configuration file.&lt;/p&gt;

&lt;h3 id=&#34;build-steps:a63ae4cd6112f070c57749a3089cca2d&#34;&gt;Build steps&lt;/h3&gt;

&lt;p&gt;I use the &lt;code&gt;arjen/hugo-build@1.6.1&lt;/code&gt; step to build Hugo.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve defined the theme: &lt;em&gt;herring-cove&lt;/em&gt; and decide to not publish the drafts&lt;/p&gt;

&lt;h3 id=&#34;deploy-steps:a63ae4cd6112f070c57749a3089cca2d&#34;&gt;Deploy steps&lt;/h3&gt;

&lt;p&gt;First, I need to install &lt;strong&gt;Git&lt;/strong&gt; to be able to push in the right repository. It&amp;rsquo;s done by the &lt;code&gt;install-packages&lt;/code&gt; step.&lt;/p&gt;

&lt;p&gt;Then, I need to push into the &lt;a href=&#34;https://github.com/juliengarcia/juliengarcia.github.io&#34;&gt;juliengarcia.github.io&lt;/a&gt; and not in the &lt;a href=&#34;https://github.com/juliengarcia/rocket-vision&#34;&gt;Rocket-Vision&lt;/a&gt;. So, I use the &lt;code&gt;leipert/git-push@0.7.6&lt;/code&gt; step.&lt;/p&gt;

&lt;p&gt;I configure the git token (&lt;code&gt;gh_oauth&lt;/code&gt; param) and destination repository (&lt;code&gt;repo: juliengarcia/juliengarcia.github.io&lt;/code&gt; param)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;box: debian
build:
  steps:
    - arjen/hugo-build@1.6.1:
      version: &amp;quot;0.14&amp;quot;
      theme: herring-cove
      flags: --buildDrafts=false

deploy:
  steps:
    - install-packages:
      packages: git
    - leipert/git-push@0.7.6:
      gh_oauth: $GIT_TOKEN
      repo: juliengarcia/juliengarcia.github.io
      basedir: public

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, on every push on Rocket-Vision repository, the hugo website is build then deploy on the juliengarcia.github.io repository and available on &lt;a href=&#34;http://juliengarcia.github.io&#34;&gt;http://juliengarcia.github.io&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>